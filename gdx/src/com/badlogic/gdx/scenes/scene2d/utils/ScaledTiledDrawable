/*******************************************************************************
 * Copyright 2017 See AUTHORS file.
 * 
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 * 
 *   http://www.apache.org/licenses/LICENSE-2.0
 * 
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 ******************************************************************************/

package com.badlogic.gdx.scenes.scene2d.utils;

import com.badlogic.gdx.graphics.g2d.Batch;
import com.badlogic.gdx.graphics.g2d.TextureRegion;
import com.badlogic.gdx.math.Affine2;
import com.badlogic.gdx.math.Matrix4;
import com.badlogic.gdx.math.Vector2;
import com.badlogic.gdx.scenes.scene2d.utils.TextureRegionDrawable;
import com.badlogic.gdx.scenes.scene2d.utils.TiledDrawable;

/**
 * Draws a {@link TextureRegion} repeatedly to fill the area an can be scaled with {@link #getScale()}.
 */
public class ScaledTiledDrawable extends TiledDrawable {

	private Vector2 scale = new Vector2();
	private Affine2 transform = new Affine2();
	private Matrix4 matrix = new Matrix4();
	private Matrix4 oldMatrix = new Matrix4();

	public ScaledTiledDrawable() {

		super();
	}

	public ScaledTiledDrawable(TextureRegion region) {

		super(region);
	}

	public ScaledTiledDrawable(TextureRegionDrawable drawable){

		super(drawable);
	}

	public Vector2 getScale() {

		return scale;
	}

	@Override
	public void draw(Batch batch, float x, float y, float width, float height) {

		oldMatrix.set(batch.getTransformMatrix());
		matrix.set(transform.setToTrnScl(x, y, scale.x, scale.y));

		batch.setTransformMatrix(matrix);

		super.draw(batch, 0, 0, width / scale.x, height / scale.y);

		batch.setTransformMatrix(oldMatrix);
	}
}
